// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User{
  id String @id @default(cuid())
  userName String
  firstName String? 
  lastName String?
  email String
  password String?
  image String?
  imageKey String?
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt
  profile Profile? 
  feedbackSections UserToFeedbackSection[]
  adminSections    AdminToFeedbackSection[]
  friendOf Friend[] @relation("friendOf")
  friends  Friend[] @relation("friends")
  friendRequestOf FriendRequest[] @relation("friendRequestOf")
  friendRequest FriendRequest[] @relation("friendRequest")
  
}

model FeedbackSection{
  id String @id @default(cuid())
  title String
  bgImage String?
  bgImageKey String?
  members UserToFeedbackSection[]
  admins   AdminToFeedbackSection[]
  suggestions FeedbackToFeedbackSection[]
  activity ActivityToFeedbackSection[]
}

model ActivityToFeedbackSection {
   id String @id @default(cuid())
   feedbackSection FeedbackSection @relation(fields: [feedbackSectionId], references: [id])
   feedbackSectionId String
   authorId String
   description String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model UserToFeedbackSection {
  user   User    @relation(fields: [userId], references: [id])
  userId          String
  feedbackSection FeedbackSection @relation(fields: [feedbackSectionId], references: [id], onDelete: Cascade)
  feedbackSectionId String
  @@id([userId, feedbackSectionId])
}

model AdminToFeedbackSection {
  user            User    @relation(fields: [userId], references: [id])
  userId          String
  feedbackSection FeedbackSection @relation(fields: [feedbackSectionId], references: [id], onDelete: Cascade)
  feedbackSectionId String
  @@id([userId, feedbackSectionId])
}

model FeedbackToFeedbackSection{
  id String @id @default(cuid())
  feedbackSection FeedbackSection @relation(fields: [feedbackSectionId], references: [id], onDelete: Cascade)
  feedbackSectionId String
  authorId String
 
  title String
  category String
  detail String
  status String
  count  Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments CommentsToSuggestion[]
}


model CommentsToSuggestion{
  id String @id @default(cuid())
  suggestion FeedbackToFeedbackSection @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  replies RepliesToComments[]
  suggestionId String
  authorId String 
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  count Int @default(0)
}

model RepliesToComments{
  id String @id @default(cuid())
  comment CommentsToSuggestion @relation(fields: [commentId], references: [id])
  commentId String
  authorId String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  count Int @default(0)
}


model Profile {
  userId String @unique
  user User @relation(fields: [userId], references: [id])

  bgImage String?
  bgImageKey String?
  description String?
  company String?
  location String?
  preferRole String?
  gitHub String? 
}

model Friend {
  friendOfId String
  friendId  String
  friendOf   User @relation("friendOf", fields: [friendOfId], references: [id])
  friends    User @relation("friends", fields: [friendId], references: [id])
  @@id([friendId, friendOfId])
}

model FriendRequest{
  friendRequestOfId String
  friendRequestId String
  friendRequestOf User @relation("friendRequestOf", fields: [friendRequestOfId], references: [id])
  friendRequest User @relation("friendRequest", fields: [friendRequestId], references: [id])
  @@id([friendRequestId, friendRequestOfId])
}






