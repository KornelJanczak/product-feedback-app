// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User{
  id String @id @default(cuid())
  userName String
  firstName String? 
  lastName String?
  email String
  password String?
  image String?
  createDate DateTime @default(now())
  updateDate DateTime @updatedAt

  profile Profile? 
  feedbackSections UserToFeedbackSection[]
  friendOf Friend[] @relation("friendOf")
  friends  Friend[] @relation("friends")
  friendRequestOf FriendRequest[] @relation("friendRequestOf")
  friendRequest FriendRequest[] @relation("friendRequest")
}


model Profile {

  userId String @unique
  user User @relation(fields: [userId], references: [id])

  bgImage String?
  description String?
  company String?
  location String?
  preferRole String?
  gitHub String?
}

model Friend {
  friendOfId String
  friendId  String
  friendOf   User @relation("friendOf", fields: [friendOfId], references: [id])
  friends    User @relation("friends", fields: [friendId], references: [id])
  @@id([friendId, friendOfId])
}

model FriendRequest{
  friendRequestOfId String
  friendRequestId String
  friendRequestOf User @relation("friendRequestOf", fields: [friendRequestOfId], references: [id])
  friendRequest User @relation("friendRequest", fields: [friendRequestId], references: [id])
  @@id([friendRequestId, friendRequestOfId])
}


model FeedbackSection {
  id        String   @id @default(cuid())
  authorId  String
  description String
  type String
  feedbacks   Feedback[]
  users       UserToFeedbackSection[]
}


model Feedback {
  id String  @id @default(cuid())
  name String
  // feedbackSections FeedbackToFeedbackSection[]
  feedbackSectionId  String
  feedbackSection    FeedbackSection  @relation(fields: [feedbackSectionId], references: [id])
}


model UserToFeedbackSection {
  userId   String
  feedbackSectionId String
  user  User @relation(fields: [userId], references: [id])
  feedbackSection  FeedbackSection  @relation(fields: [feedbackSectionId], references: [id])
  role String
  @@id([userId, feedbackSectionId])
}





// model FeedbackToFeedbackSection {
//   feedbackSection   FeedbackSection @relation(fields: [feedbackSectionId], references: [id])
//   feedbackSectionId String
//   feedback   Feedback @relation(fields: [feedbackId], references: [id])
//   feedbackId String
//   @@id([feedbackSectionId, feedbackId])
// }




// model AccessibleFeedbackSection {
//   user            User @relation(fields: [userId], references: [id])
//   userId          String
//   feedbackSection FeedbackSection @relation(fields: [feedbackSectionId], references: [id])
//   feedbackSectionId String
//   @@id([userId, feedbackSectionId])
// }



// model User{
//   id String @id @default(cuid())
//   userName String
//   firstName String? 
//   lastName String?
//   email String
//   password String?
//   image String?
//   createDate DateTime @default(now())
//   updateDate DateTime @updatedAt
//   profile Profile? @relation(fields: [profileId], references: [id])
//   profileId String? @unique
//   feedbackSections UserToFeedbackSection[]
//   friendOf Friend[] @relation("friendOf")
//   friends  Friend[] @relation("friends")
//   friendRequestOf FriendRequest[] @relation("friendRequestOf")
//   friendRequest FriendRequest[] @relation("friendRequest")
// }


// model Profile {
//   id String  @id @default(cuid())
//   user User?
//   bgImage String?
//   description String?
//   company String?
//   location String?
//   preferRole String?
//   gitHub String?
// }